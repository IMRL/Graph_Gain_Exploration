cmake_minimum_required(VERSION 2.8.3)
project(dsvplanner)

set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOTHER_STUFF=0" )

set(CMAKE_CXX_STANDARD 17)

# set(CMAKE_BUILD_TYPE Release)

find_package(catkin REQUIRED COMPONENTS
  roscpp
  geometry_msgs
  visualization_msgs
  message_generation
  # octomap_world
  chunkmap
  chunkmap_msgs
  tf
  kdtree
  std_msgs
  nav_msgs
  misc_utils
  graph_utils
  laser_geometry
  lkh_tsp_solver
)
find_package(cmake_modules REQUIRED)
find_package(Eigen REQUIRED)
# find_package(octomap REQUIRED)

################################################
## Declare ROS messages, services and actions ##
################################################
add_service_files(
  FILES
  dsvplanner_srv.srv
  clean_frontier_srv.srv
)

generate_messages(
  DEPENDENCIES
  geometry_msgs
  visualization_msgs
  std_msgs
)

###################################
## catkin specific configuration ##
###################################
catkin_package(
  INCLUDE_DIRS include ${Eigen_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS}
  LIBRARIES ${catkin_LIBRARIES}
  CATKIN_DEPENDS message_runtime roscpp geometry_msgs visualization_msgs chunkmap chunkmap_msgs misc_utils graph_utils tf kdtree lkh_tsp_solver
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations

include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${Eigen_INCLUDE_DIRS}
  # ${OCTOMAP_INCLUDE_DIRS}
)

## Declare a C++ library
add_library(dsvPlannerLib src/drrtp.cpp src/drrt.cpp src/dual_state_graph.cpp src/dual_state_frontier.cpp src/grid.cpp src/chunkmap_helper.cpp)
add_dependencies(dsvPlannerLib ${${PROJECT_NAME}_EXPORTED_TARGETS} )
target_link_libraries(dsvPlannerLib ${catkin_LIBRARIES})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(${PROJECT_NAME} src/drrtp_node.cpp)
add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} )
target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} dsvPlannerLib)
